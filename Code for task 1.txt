# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import STL
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from keras.models import Sequential, load_model
from keras.layers import Dense, LSTM
import numpy as np

# ------------------------------
# Data Preparation Section
# ------------------------------

# Load and Preprocess Dataset
file_path = 'Nat_Gas.csv'
df = pd.read_csv(file_path)
df['Date'] = pd.to_datetime(df['Dates'])  # Convert Date to datetime format
df = df.sort_values('Date')  # Sort the dataset by Date
df.rename(columns={'Dates': 'Date', 'Prices': 'Price'}, inplace=True)  # Rename columns for clarity

# ------------------------------
# Exploratory Data Analysis (EDA) Section
# ------------------------------

# Plot Monthly Natural Gas Prices
plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Price'], marker='o', linestyle='-')
plt.title('Monthly Natural Gas Prices')
plt.xlabel('Date')
plt.ylabel('Price (in arbitrary unit)')
plt.grid(True)
plt.show()

# Decompose Time-Series
df.set_index('Date', inplace=True)  # Set Date as index
stl = STL(df['Price'], seasonal=13)  # Decompose using STL
result = stl.fit()
fig = plt.figure(figsize=(14, 10))
result.plot()  # Plot decomposition
plt.show()

# ------------------------------
# LSTM Model Building Section
# ------------------------------

# Normalize Data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df['Price'].values.reshape(-1, 1))

# Create Sequences
look_back = 12
X, y = [], []
for i in range(len(scaled_data) - look_back):
    X.append(scaled_data[i:i+look_back])
    y.append(scaled_data[i+look_back])
X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Build LSTM Model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train Model
model.fit(X, y, epochs=20000, batch_size=64)

# Save Model
model.save('lstm_model.h5')

# ------------------------------
# Model Evaluation Section
# ------------------------------

# Make Predictions
predicted_price = model.predict(X)
predicted_price = scaler.inverse_transform(np.reshape(predicted_price, (predicted_price.shape[0], 1)))

# Evaluate Model
rmse = np.sqrt(mean_squared_error(df['Price'][look_back:], predicted_price))
print(f'Root Mean Squared Error: {rmse}')

# Plot Results
plt.figure(figsize=(15, 6))
plt.plot(df.index, df['Price'], label='Real Price')
plt.plot(df.index[look_back:], predicted_price, label='Predicted Price')
plt.title('Natural Gas Price Prediction')
plt.xlabel('Time')
plt.ylabel('Natural Gas Price')
plt.legend()
plt.show()

# ------------------------------
# Price Estimation Function Section
# ------------------------------

def estimate_gas_price_lstm(target_date, look_back=12, model=None, scaler=None):
    target_date = pd.Timestamp(target_date)
    if target_date in df.index:
        return df.loc[target_date, 'Price']
    else:
        last_sequence = df['Price'].iloc[-look_back:].values.reshape(-1, 1)
        last_sequence_scaled = scaler.transform(last_sequence)
        last_sequence_scaled = np.reshape(last_sequence_scaled, (1, look_back, 1))
        last_historical_date = df.index[-1]
        months_diff = (target_date.year - last_historical_date.year) * 12 + target_date.month - last_historical_date.month
        next_price_scaled = None
        for _ in range(months_diff):
            next_price_scaled = model.predict(last_sequence_scaled)
            last_sequence_scaled = np.roll(last_sequence_scaled, shift=-1, axis=1)
            last_sequence_scaled[0, -1, 0] = next_price_scaled
        next_price = scaler.inverse_transform(np.reshape(next_price_scaled, (1, 1)))[0, 0]
        return next_price

# ------------------------------
# Testing Section
# ------------------------------

# Test the Price Estimation Function
test_dates = ['2021-06-30', '2024-10-31', '2025-06-30']
price_estimates = [estimate_gas_price_lstm(date, look_back=12, model=model, scaler=scaler) for date in test_dates]

# Output Results
for date, estimate in zip(test_dates, price_estimates):
    print(f"The estimated price of natural gas on {date} is {estimate:.2f}")
