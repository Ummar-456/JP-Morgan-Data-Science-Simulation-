from keras.models import load_model
from sklearn.preprocessing import MinMaxScaler

def price_storage_contract(injection_dates, withdrawal_dates, injection_rate, withdrawal_rate, max_volume, storage_cost_per_month, injection_cost_per_MMBtu, withdrawal_cost_per_MMBtu):
    """
    Calculate the net value of a gas storage contract.

    Parameters:
        - injection_dates: List of dates for injection
        - withdrawal_dates: List of dates for withdrawal
        - injection_rate: Rate at which gas can be injected
        - withdrawal_rate: Rate at which gas can be withdrawn
        - max_volume: Maximum volume that can be stored
        - storage_cost_per_month: Monthly storage cost
        - injection_cost_per_MMBtu: Cost for injecting 1 MMBtu
        - withdrawal_cost_per_MMBtu: Cost for withdrawing 1 MMBtu

    Returns:
        - net_value: Net value of the storage contract
    """

    # Initialize variables
    net_value = 0
    total_storage_months = 0
    total_volume_stored = 0
    model = load_model('lstm_model.h5')  # Load the LSTM model
    scaler = MinMaxScaler(feature_range=(0, 1))  # Load the scaler
    
    # Injection Phase
    for date in injection_dates:
        gas_price = estimate_gas_price_lstm(date, look_back=12, model=None, scaler=None)  # Replace with your price estimation function
        volume_to_inject = min(max_volume - total_volume_stored, injection_rate)
        cost_of_purchase = volume_to_inject * gas_price
        injection_cost = volume_to_inject * injection_cost_per_MMBtu
        total_volume_stored += volume_to_inject
        net_value -= (cost_of_purchase + injection_cost)
        total_storage_months += 1

    # Storage Phase
    net_value -= total_storage_months * storage_cost_per_month

    # Withdrawal Phase
    for date in withdrawal_dates:
        gas_price = estimate_gas_price_lstm(date, look_back=12, model=None, scaler=None)  # Replace with your price estimation function
        volume_to_withdraw = min(total_volume_stored, withdrawal_rate)
        revenue = volume_to_withdraw * gas_price
        withdrawal_cost = volume_to_withdraw * withdrawal_cost_per_MMBtu
        total_volume_stored -= volume_to_withdraw
        net_value += (revenue - withdrawal_cost)

    return net_value

# Test the function
injection_dates = ['2023-06-30', '2023-07-31']
withdrawal_dates = ['2023-12-31', '2024-01-31']
injection_rate = 1e6  # MMBtu per month
withdrawal_rate = 1e6  # MMBtu per month
max_volume = 2e6  # MMBtu
storage_cost_per_month = 100000  # $
injection_cost_per_MMBtu = 10000 / 1e6  # $ per MMBtu
withdrawal_cost_per_MMBtu = 10000 / 1e6  # $ per MMBtu

net_value = price_storage_contract(injection_dates, withdrawal_dates, injection_rate, withdrawal_rate, max_volume, storage_cost_per_month, injection_cost_per_MMBtu, withdrawal_cost_per_MMBtu)
print(f"The net value of the storage contract is ${net_value:.2f}")
